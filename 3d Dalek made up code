


#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <glut.h>
#include "virtual_observer_onsphere.h"

using namespace std;

typedef struct {float x; float y; float z; } point3D;
typedef struct {float x; float y; float z; } vector;

void reshapeFcn(GLint newWidth, GLint newHeight);


void rotateParts(int value);

float top = 0;
float body =- 90;
float body1=0;
float movelowerneck=0;
float eyepiece=0;
float arm1move =0;
float arm1moveup=0;
float arm2move =0;
float arm2moveup=0;
float move=0;
float fly=0;

int parts = 0;
int value = 0;



GLfloat Xm =-2.0, Ym=-2.0, XM=2.0, YM=2.0;
float winWidth =800;
float winHeight =800;





void display();
void keyboard(unsigned char key, int x, int y);
void special_keyboard(int key, int x, int y);
void write_text(char text[], int x, int y);
char message[20];
bool keypressed = false;										

GLfloat dnear=1.0, dfar=1000.0;
///////////////////////////////////				
class world_axes
{	// places some axes in the Virtual World
	protected:
		double length;
	public:
		world_axes(double p1) { length = p1;}
		void define()
		{
			glPushAttrib(GL_CURRENT_BIT);
			glColor3f(0,0,1);  // BLUE
			glBegin(GL_LINES);
				glVertex3f(-length,0.0,0.0);	glVertex3f(length,0.0,0.0); 
				glVertex3f(0.0,-length,0.0);	glVertex3f(0.0,length,0.0); 
				glVertex3f(0.0,0.0,-length);	glVertex3f(0.0,0.0,length); 
			glEnd();
			glPopAttrib();

		}
};
///////////////////////////////////	

class barirer
{



private :



public:
void define_to_Opengl(float);


///////////////////////////////////	

};



GLfloat L1_pos[]= {0.0,50.0,150.0,1};	// LIGHT 1  point source
//GLfloat L1_pos[]= {0,0,100,0.0};		// LIGHT 1  directional source
GLfloat L1_amb[]= {0.0,0.0,0.0,1.0};	// LIGHT 1
GLfloat L1_dif[]= {1.0,1.0,1.0,1.0};	// LIGHT 1
GLfloat L1_spec[]= {0.0,0.0,0.0,1.0};	// LIGHT 1







world_axes the_axes(200);				// 90 = length of the axis (one side of Origin) 
virtual_observer_onsphere vo(200,2.5);	// 100 = radius of sphere, increment in degrees	
GLUquadric * quadric = gluNewQuadric();

				
int main(int argc, char**argv)
{
	glutInit(&argc,argv); 
	glutInitDisplayMode(GL_DOUBLE | GLUT_RGB |GLUT_DEPTH );		

	glutInitWindowPosition(100,100);
	glutInitWindowSize(800,800);        
 
	glutCreateWindow("daleks"); 
	
	glMatrixMode(GL_PROJECTION);    
	glLoadIdentity();   
	//glOrtho(-200,200,-200,200,-300,+10000);	//if i use this i cant zoom in or out
	gluPerspective(90,1,0.1,3000);
glFrustum(Xm,Ym,XM,YM,dnear,dfar);
	// YOUR CODE GOES HERE
glFrontFace(GL_CCW);					// FOR BACK FACE CULLING
//glEnable(GL_CULL_FACE);				// FOR BACK FACE CULLING
//glCullFace(GL_BACK);					// FOR BACK FACE CULLING



	GLfloat mat_specular[] = {1.0, 1.0, 1.0, 1.0};
	GLfloat mat_shininess[] = {50.0};
	GLfloat light_position[] = {1.0, 1.0, 1.0, 0.0};

	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);


glEnable(GL_DEPTH_TEST);				// DEPTH TESTING
glShadeModel(GL_SMOOTH);				// SHADING
glEnable(GL_COLOR_MATERIAL);
glEnable(GL_LIGHTING);				// LIGHTING
glEnable(GL_LIGHT1);					// LIGHTING
glEnable (GL_LIGHT0);
glEnable(GL_NORMALIZE);				// LIGHTING

glLightfv(GL_LIGHT1,GL_AMBIENT,L1_amb);		// LIGHTING
glLightfv(GL_LIGHT1,GL_DIFFUSE,L1_dif);		// LIGHTING
glLightfv(GL_LIGHT1,GL_SPECULAR,L1_spec);		// LIGHTING
//Add ambient light
	GLfloat ambientColor[] = {0.2f, 0.2f, 0.2f, 1.0f}; //Color (0.2, 0.2, 0.2)
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientColor);
	
	//Add positioned light
	GLfloat lightColor0[] = {0.0f, 0.0f, 1.0f, 1.0f}; //Color (0.5, 0.5, 0.5)
	GLfloat lightPos0[] = {50.0f, 10.0f, 80.0f, 1.0f}; //Positioned at (4, 0, 8)
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightColor0);
	glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
	glutDisplayFunc(display); 
	glutKeyboardFunc(keyboard);
	glutSpecialFunc(special_keyboard); 

	rotateParts(value);
	glutMainLoop();  

	return 0;
}



void barirer::define_to_Opengl(float angle )

{	



	




glPushMatrix();//floor




glPushMatrix();
//glColor3f(1.0f,1.0f,1.0f);

glTranslatef(0,-20,0);
glScalef(130,30,150);
glutSolidCube(1);
glPopMatrix();





	//body


glPushMatrix();

glTranslatef(5,-2,0);
glRotatef(body,1,0,0);
glRotatef(body1,0,0,1);
glTranslatef(0,move,0);
glTranslatef(0,0,fly);
	glPushMatrix();

glScalef(75,95,60);
glColor3f(1.0f,0.0f,0.0f);
glutSolidCone(0.45,1.0,7,10);
glPopMatrix();

//////////////////////////////////////////////////////
glPushMatrix();//body part



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
glTranslatef(-9,33,6);
glRotatef(parts,1,0,0);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glPopMatrix();


//////////////////////////////////////////////////////
glPushMatrix();//body part1



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);

glTranslatef(10,20,20);
glRotatef(parts,0,0,1);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glPopMatrix();
/////////////////////////////////////////////////////

glPushMatrix();//body part2



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y

glTranslatef(15,27,5);
glRotatef(parts,0,0,1);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glPopMatrix();


//////////////////////////////////////////////////////
glPushMatrix();//body part3



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
glTranslatef(-4.8,23,20);
glScalef(10,10,10);
glRotatef(parts,0,0,1);
glutSolidSphere(0.5,20,20);
glPopMatrix();
/////////////////////////////////////////////////////



glPushMatrix();//body part5



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(27,10,5);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glRotatef(parts,0,0,1);
glPopMatrix();

/////////////////////////////////////////////////////





glPushMatrix();//body part6



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(20,5,18);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glRotatef(parts,0,0,1);
glPopMatrix();



/////////////////////////////////////////////////////





glPushMatrix();//body part7



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(-20,10,20);
glScalef(10,10,10);
glRotatef(parts,0,0,1);
glutSolidSphere(0.5,20,20);
glPopMatrix();

/////////////////////////////////////////////////////


glPushMatrix();//body part8



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(-28,10,5);
glScalef(10,10,10);
glRotatef(parts,0,0,1);
glutSolidSphere(0.5,20,20);
glPopMatrix();

/////////////////////////////////////////////////////


glPushMatrix();//body part9



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(-13,-15,25);
glScalef(10,10,10);
glRotatef(parts,0,0,1);
glutSolidSphere(0.5,20,20);
glPopMatrix();





/////////////////////////////////////////////////////


glPushMatrix();//body part10



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(-25,-15,5);
glScalef(10,10,10);
glRotatef(parts,0,0,1);
glutSolidSphere(0.5,20,20);
glPopMatrix();

/////////////////////////////////////////////////////


glPushMatrix();//body part11



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(15,-12,25);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glPopMatrix();



/////////////////////////////////////////////////////


glPushMatrix();//body part12



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(20,-25,5);
glScalef(10,10,10);
glRotatef(parts,0,0,1);
glutSolidSphere(0.5,20,20);
glPopMatrix();



/////////////////////////////////////////////////////


glPushMatrix();//body part13



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(0,-33,10);
glRotatef(parts,0,0,1);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glPopMatrix();


/////////////////////////////////////////////////////


glPushMatrix();//body part14



glPushMatrix();
glColor3f(1.0f,1.0f,0.0f);
			//x,z, y
glTranslatef(0,-23,25);
glScalef(10,10,10);
glutSolidSphere(0.5,20,20);
glPopMatrix();

///////////////////////////////////
glPushMatrix();//neck

			glTranslatef(0,0,10);
			
			glPushMatrix();
glColor3f(1.0f,0.0f,0.0f);
glRotatef(movelowerneck,0,0,1);
			glTranslatef(0,0,35);
			glScalef(30,40,10);
			glutSolidCube (1);
			glPopMatrix();
///////////////////////////////////////////////
glPushMatrix();//lower neck


glTranslatef(0,0,35);

glPushMatrix();

glRotatef(parts,0,0,1);
glColor3f(0.0f,0.0f,0.0f);
gluQuadricDrawStyle(quadric,GLU_FILL);
gluCylinder(quadric,15,15,20,20,20);
glPopMatrix();
/////////////////////////////////////////////////////////	

glPushMatrix();//arm1




glPushMatrix();
glColor3f(1.0f,1.0f,1.0f);
glRotatef(movelowerneck,0,0,1);
glRotatef(arm1move,1,0,0);
glRotatef(arm1moveup,0,0,1);
glTranslatef(-10,-25,0);
glScalef(5,30,5);
glutSolidCube(1);
glPopMatrix();




//////////////////////////////////////////////////////////

glPushMatrix();//arm2



glPushMatrix();
glColor3f(1.0f,1.0f,1.0f);
glRotatef(movelowerneck,0,0,1);
glRotatef(arm2move,1,0,0);
glRotatef(arm2moveup,0,0,1);
glTranslatef(10,-25,0);
glScalef(5,30,5);
glutWireCube(1);
glPopMatrix();
		glPopMatrix(); //pop lower neck






////////////////////////////////////////////////////////
	glPushMatrix();//head


	
glRotatef(top,0,0,1);
	glTranslatef(0,0,15);
	glPushMatrix();
	glScalef(32,32,32);
	glColor3f(1.0f,0.0f,0.0f);
	glutSolidSphere(0.5,20,20);
	glPopMatrix();
			



////////////////////////////////////////////////
	glPushMatrix();//eyes piece
glRotatef(eyepiece,1,0,0);

	glPushMatrix();
glTranslatef(0,-35,5);
glScalef(10,10,10);
glColor3f(0.0f,0.0f,1.0f);
	glutSolidSphere(0.5,20,20);
glPopMatrix();


//////////////////////////////////////////////////////
glPushMatrix();//eye

glTranslatef(0,-20,5);


glPushMatrix();

glColor3f(1.0f,1.0f,1.0f);
glScalef(5,30,5);
glutSolidCube(1);
glPopMatrix();




///////////////////////////////////////////////////////////
	glPushMatrix();//ear1


	glPushMatrix();//ears
glRotatef(top,0,0,1);
	glTranslatef(-7,15,10);
	glPushMatrix();
	glScalef(5,5,5);
	glColor3f(1.0f,1.0f,1.0f);
	glutSolidSphere(0.5,20,20);
	glPopMatrix();			

///////////////////////////////////////////////////////////
	glPushMatrix();//ear1


	glPushMatrix();//ears
glRotatef(top,0,0,1);
	glTranslatef(15,1,0);
	glPushMatrix();
	glScalef(5,5,5);
	glColor3f(1.0f,1.0f,1.0f);
	glutSolidSphere(0.5,20,20);
	glPopMatrix();


////////////////////////////////////////////

glPopMatrix();//body part14

glPopMatrix();//body part13
glPopMatrix();//body part12
glPopMatrix();//body part11
glPopMatrix();//body part10
glPopMatrix();//body part9
glPopMatrix();//body part8
glPopMatrix();//body part7
glPopMatrix();//body part6
glPopMatrix();//body part2
glPopMatrix();//body part3
glPopMatrix();//body part5
glPopMatrix();//body part1

glPopMatrix();//body part
glPopMatrix();
glPopMatrix();//arm2
glPopMatrix();//arm 2 piece
glPopMatrix();//arm1
glPopMatrix();//eye piece
		glPopMatrix();//pop neck

		glPopMatrix(); //eye
	glPopMatrix();//pop head
	glPopMatrix();//ears
glPopMatrix();//body end pop Matrix







}









////////////////////
void display()
{
	glClearColor(0,0,0,0);								
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		

	glColor3f(1,1,1);
	write_text("daleks",5,190);
	write_text	("W To move FORWARD", -100, 190); 
write_text	("S To move BACKWARD", -100, 180); 
write_text	("A To move LEFT", -100, 170);
write_text	("D To move RIGHT", -100, 160);
write_text	("E To move UP", -100, 150);
write_text	("C To move DOWN", -100, 140); 
write_text	("R To move HEAD LEFT", -100, 130); 
write_text	("T To move HEAD RIGHT", -100, 120); 
write_text	("Z To move NECK LEFT", -100, 110); 
write_text	("X To move NECK RIGHT", -100, 100);  
write_text	("Y To move ARM1 UP", 10, 170);  
write_text	("H To move ARM1 DOWN", 10, 160);  
write_text	("F To move ARM1 LEFT", 10, 150);  
write_text	("G To move ARM1 RIGHT", 10, 140);  
write_text	("I To move ARM2 UP", 10, 130);  
write_text	("J To move ARM2 DOWN", 10, 120);  
write_text	("K To move ARM2 LEFT", 10, 110);  
write_text	("L To move ARM2 RIGHT", 10, 100);  
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(vo.x,vo.y,vo.z,0,0,0,0,1,0);  // CAMERA: COMMAND TO ALTER ITS LOCATION + DIRECTION
			glLightfv(GL_LIGHT1,GL_POSITION,L1_pos);		// LIGHTING								// gluLookAt(Ax,Ay,Az,Bx,By,Bz,0,1,0)where(Ax,Ay,Az)=position and(Bx,By,Bz)= point being looked at
	barirer mybarirer;
	mybarirer.define_to_Opengl(top);
	// Define the objects in the virtual world
	the_axes.define();
		// YOUR CODE GOES HERE


	glutSwapBuffers();
}
////////////////////
void keyboard(unsigned char key, int x, int y)
{	
	switch(key)
	{


		case 'Q':	
		case 'q':	exit(0);
					break;
		case 'a':	
			body1++;
					break;
		case 'd':
			body1--;
					break;
		case 'w':
			 move--;
					break;
		case 's':
			move++;
					break;

	case 'e':
			fly++;
					break;
		case 'c':
			fly --;
					break;

		case 'r':
			top--;
					break;

		case't':
			top++;
					break;

case 'z':
			movelowerneck--;
					break;
		case 'x':
			movelowerneck ++;
					break;

		case 'v':
		eyepiece++;
					break;

		case'b':
			eyepiece--;
					break;

case 'y':
			arm1move--;
					break;
		case 'h':
		arm1move++;
					break;

		case 'f':
			arm1moveup--;
					break;

		case'g':
			arm1moveup++;
					break;

case 'i':
			arm2move--;
					break;
		case 'j':
		arm2move++;
					break;

		case 'k':
			arm2moveup--;
					break;

		case'l':
			arm2moveup++;
					break;
					
		default:	
					break;
	}	
	glutPostRedisplay();
}
////////////////////
void special_keyboard(int key, int x, int y)
{	// move the position of the virtual observer (over surface of sphere, object at centre)
	switch(key) 
	{
		case GLUT_KEY_LEFT:	vo.dec_theta();
							break;
		case GLUT_KEY_RIGHT:vo.inc_theta(); 
							break;
		case GLUT_KEY_DOWN: vo.dec_phi();
							break;	
		case GLUT_KEY_UP:	vo.inc_phi();	
							break;
								// can only see ZOOM in or out when Perspective projection is used
		case GLUT_KEY_PAGE_UP:	vo.set_radius(vo.get_radius()-20);
								break;
		case GLUT_KEY_PAGE_DOWN:vo.set_radius(vo.get_radius()+20);
								break;
	}
	glutPostRedisplay();
}
////////////////////
void write_text(char text[], int x, int y)
{
	glRasterPos2i(x,y);     // position of text is relative to the Origin of Virtual World
	int i;
	for(i=0;i<strlen(text);i++) glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,text[i]); 
}
///////////////////////////////////	
void rotateParts(int value)
{
	parts+=10;
	
	glutTimerFunc(100,rotateParts,value);
	glutPostRedisplay();
}

void reshapeFcn(GLint newWidth, GLint newHeight) {

	glViewport (0,0,newWidth, newHeight);
	winWidth=newWidth;
	winHeight=newHeight;
}
